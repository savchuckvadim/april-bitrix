'use client';

import * as React from 'react';
import { Clock, Calendar, User, Plus } from 'lucide-react';
import { cn } from '@workspace/ui/lib/utils';
import { Button } from '@workspace/ui/components/button';
import { Input } from '@workspace/ui/components/input';
import { Textarea } from '@workspace/ui/components/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@workspace/ui/components/select';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@workspace/ui/components/dialog';
import { Popover, PopoverContent, PopoverTrigger } from '@workspace/ui/components/popover';
import { Calendar as CalendarComponent } from '@workspace/ui/components/calendar';
import { TimePicker } from '@workspace/ui/components/time-picker';

export interface TimePickerWidgetProps {
    isOpen?: boolean;
    onOpenChange?: (open: boolean) => void;
    onSave?: (data: {
        title: string;
        description?: string;
        date: Date;
        time: string;
        contact: string;
        type: string;
        importance: 'important' | 'not_important';
    }) => void;
    existingEvents?: Array<{ time: string; title: string; type: string; contact?: string }>;
    selectedDate?: Date;
    className?: string;
}

const eventTypes = [
    { value: 'call', label: '–ó–≤–æ–Ω–æ–∫', icon: 'üìû' },
    { value: 'presentation', label: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', icon: 'üìä' },
    { value: 'decision_call', label: '–ó–≤–æ–Ω–æ–∫ –ø–æ —Ä–µ—à–µ–Ω–∏—é', icon: '‚úÖ' },
    { value: 'payment_call', label: '–ó–≤–æ–Ω–æ–∫ –ø–æ –æ–ø–ª–∞—Ç–µ', icon: 'üí≥' },
    { value: 'post_sale_call', label: '–ó–≤–æ–Ω–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏', icon: 'üõí' }
];

const contacts = [
    '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
    '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
    '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
    '–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
    '–î–º–∏—Ç—Ä–∏–π –°–æ–∫–æ–ª–æ–≤'
];

const TimePickerWidget = React.forwardRef<HTMLButtonElement, TimePickerWidgetProps>(
    (
        {
            isOpen: controlledOpen,
            onOpenChange: controlledOnOpenChange,
            onSave,
            existingEvents = [],
            selectedDate = new Date(),
            className,
            ...props
        },
        ref
    ) => {
        const [internalOpen, setInternalOpen] = React.useState(false);
        const [showCalendar, setShowCalendar] = React.useState(false);

        const isOpen = controlledOpen !== undefined ? controlledOpen : internalOpen;
        const onOpenChange = controlledOnOpenChange || setInternalOpen;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
        const [formData, setFormData] = React.useState({
            title: '',
            description: '',
            date: selectedDate,
            time: '',
            contact: '',
            type: 'call',
            importance: 'important' as 'important' | 'not_important'
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selectedDate
        React.useEffect(() => {
            setFormData(prev => ({ ...prev, date: selectedDate }));
        }, [selectedDate]);

        const handleSave = () => {
            if (formData.title && formData.time && formData.contact) {
                onSave?.(formData);
                // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
                setFormData({
                    title: '',
                    description: '',
                    date: new Date(),
                    time: '',
                    contact: '',
                    type: 'call',
                    importance: 'important'
                });
                onOpenChange(false);
            }
        };

        const handleCancel = () => {
            setFormData({
                title: '',
                description: '',
                date: new Date(),
                time: '',
                contact: '',
                type: 'call',
                importance: 'important'
            });
            onOpenChange(false);
        };

        return (
            <Dialog open={isOpen} onOpenChange={onOpenChange}>
                <DialogTrigger asChild>
                    <Button
                        ref={ref}
                        className={cn('gap-2', className)}
                        {...props}
                    >
                        <Clock className="w-4 h-4" />
                        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
                    </Button>
                </DialogTrigger>
                <DialogContent className="max-w-2xl">
                    <DialogHeader>
                        <DialogTitle className="flex items-center gap-2">
                            <Clock className="w-5 h-5" />
                            –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                        </DialogTitle>
                        <DialogDescription>
                            –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –¥–µ—Ç–∞–ª–µ–π
                        </DialogDescription>
                    </DialogHeader>

                    <div className="space-y-6">
                        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                        <div className="grid grid-cols-2 gap-4">
                            <div className="space-y-2">
                                <label className="text-sm font-medium text-foreground">
                                    –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è *
                                </label>
                                <Input
                                    value={formData.title}
                                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                                    placeholder="–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å"
                                />
                            </div>

                            <div className="space-y-2">
                                <label className="text-sm font-medium text-foreground">
                                    –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
                                </label>
                                <Select
                                    value={formData.type}
                                    onValueChange={(value) => setFormData({ ...formData, type: value })}
                                >
                                    <SelectTrigger>
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {eventTypes.map((type) => (
                                            <SelectItem key={type.value} value={type.value}>
                                                <div className="flex items-center gap-2">
                                                    <span>{type.icon}</span>
                                                    {type.label}
                                                </div>
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        </div>

                        {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
                        <div className="grid grid-cols-2 gap-4">
                            <div className="space-y-2">
                                <label className="text-sm font-medium text-foreground">
                                    –î–∞—Ç–∞
                                </label>
                                <Popover open={showCalendar} onOpenChange={setShowCalendar}>
                                    <PopoverTrigger asChild>
                                        <Button
                                            variant="outline"
                                            className="w-full justify-start text-left font-normal"
                                        >
                                            <Calendar className="mr-2 h-4 w-4" />
                                            {formData.date.toLocaleDateString('ru-RU')}
                                        </Button>
                                    </PopoverTrigger>
                                    <PopoverContent className="w-auto p-0" align="start">
                                        <CalendarComponent
                                            mode="single"
                                            selected={formData.date}
                                            onSelect={(date) => {
                                                setFormData({ ...formData, date: date || new Date() });
                                                setShowCalendar(false);
                                            }}
                                            initialFocus
                                        />
                                    </PopoverContent>
                                </Popover>
                            </div>

                            <div className="space-y-2">
                                <label className="text-sm font-medium text-foreground">
                                    –í—Ä–µ–º—è *
                                </label>
                                <TimePicker
                                    value={formData.time}
                                    onChange={(time) => setFormData({ ...formData, time })}
                                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è"
                                    allowManualInput={true}
                                    showTimeline={true}
                                    existingEvents={existingEvents}
                                    className="w-full"
                                />
                            </div>
                        </div>

                        {/* –ö–æ–Ω—Ç–∞–∫—Ç –∏ –≤–∞–∂–Ω–æ—Å—Ç—å */}
                        <div className="grid grid-cols-2 gap-4">
                            <div className="space-y-2">
                                <label className="text-sm font-medium text-foreground">
                                    –ö–æ–Ω—Ç–∞–∫—Ç *
                                </label>
                                <Select
                                    value={formData.contact}
                                    onValueChange={(value) => setFormData({ ...formData, contact: value })}
                                >
                                    <SelectTrigger>
                                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {contacts.map((contact) => (
                                            <SelectItem key={contact} value={contact}>
                                                <div className="flex items-center gap-2">
                                                    <User className="w-4 h-4" />
                                                    {contact}
                                                </div>
                                            </SelectItem>
                                        ))}
                                        <SelectItem value="new">
                                            <div className="flex items-center gap-2">
                                                <Plus className="w-4 h-4" />
                                                –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
                                            </div>
                                        </SelectItem>
                                    </SelectContent>
                                </Select>
                            </div>

                            <div className="space-y-2">
                                <label className="text-sm font-medium text-foreground">
                                    –í–∞–∂–Ω–æ—Å—Ç—å
                                </label>
                                <Select
                                    value={formData.importance}
                                    onValueChange={(value: 'important' | 'not_important') =>
                                        setFormData({ ...formData, importance: value })
                                    }
                                >
                                    <SelectTrigger>
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="important">–í–∞–∂–Ω–æ–µ</SelectItem>
                                        <SelectItem value="not_important">–ù–µ–≤–∞–∂–Ω–æ–µ</SelectItem>
                                    </SelectContent>
                                </Select>
                            </div>
                        </div>

                        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                        <div className="space-y-2">
                            <label className="text-sm font-medium text-foreground">
                                –û–ø–∏—Å–∞–Ω–∏–µ
                            </label>
                            <Textarea
                                value={formData.description}
                                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è..."
                                className="min-h-20"
                            />
                        </div>
                    </div>

                    <DialogFooter>
                        <Button variant="outline" onClick={handleCancel}>
                            –û—Ç–º–µ–Ω–∞
                        </Button>
                        <Button
                            onClick={handleSave}
                            disabled={!formData.title || !formData.time || !formData.contact}
                        >
                            –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        );
    }
);

TimePickerWidget.displayName = 'TimePickerWidget';

export { TimePickerWidget };
