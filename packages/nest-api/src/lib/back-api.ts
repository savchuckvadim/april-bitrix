import axios, { AxiosResponse, Method } from 'axios';
import { AUTH_TOKEN_NAME } from '../consts/auth.consts';

// const prod = 'https://back.april-app.ru/';
const prod = `http://localhost:3000`;
// const prod = `http://localhost:8334/`;
const url = prod;
// const url = 'https://dis7h8-92-63-121-184.ru.tuna.am';



export interface IBackResponse<T> {
    resultCode: EResultCode; // 0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞
    data?: T; // –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–∏ —É—Å–ø–µ—Ö–µ)
    message?: string; // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ (–ø—Ä–∏ –æ—à–∏–±–∫–µ)
    errors?: string[]; // –æ—à–∏–±–∫–∏ (–ø—Ä–∏ –æ—à–∏–±–∫–µ)
}
export enum EResultCode {
    SUCCESS = 0,
    ERROR = 1,
}

const evsHeaders = {
    'content-type': 'application/json',
    'X-BACK-API-KEY': '',
};

const evs = axios.create({
    baseURL: url,
    withCredentials: true,
    headers: evsHeaders,
});
// // üîê –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º JWT
// evs.interceptors.request.use((config) => {
//     const token = localStorage.getItem(AUTH_TOKEN_NAME);
//     if (token) {
//         config.headers.Authorization = `Bearer ${token}`;
//     }
//     return config;
// });
export const customAxios = async <T>({
    url,
    method,
    data,
    params,
    headers,
}: {
    url: string;
    method: Method;
    data?: any;
    params?: any;
    headers?: any;
}): Promise<T> => {
    // // Orval –≤—Å–µ–≥–¥–∞ –∂–¥—ë—Ç, —á—Ç–æ mutator –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç **–¥–∞–Ω–Ω—ã–µ**, –∞ –Ω–µ { resultCode, data }
    // const res = await backAPI.service<T>(url as EBACK_ENDPOINT, method.toLowerCase() as API_METHOD, data, params);
    // return res.data as T; // –≤–∞–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∏–º–µ–Ω–Ω–æ T

    // const instance = axios.create({
    //     baseURL: 'http://localhost:3000', // –∏–ª–∏ prod
    //     headers: { 'Content-Type': 'application/json', ...headers },
    // });

    const res = await evs.request<IBackResponse<T>>({
        url,
        method: method as Method,
        data,
        params, // üîπ –≤–æ—Ç –∑–¥–µ—Å—å axios —Å–∞–º –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤ query string
        headers,
    });
    if (res.data.resultCode !== EResultCode.SUCCESS) {
        throw new Error(res.data.message || `Backend error ${url}`);
    }

    return res.data.data as T;
};
