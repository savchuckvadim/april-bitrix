/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * April backend
 * API for april-bitrix  hooks and  frontends
 * OpenAPI spec version: 1.0
 */
import type {
    CreatePortalRegionDto,
    CreateRegionDto,
    DeletePortalRegionDto,
    RegionEntity,
    UpdatePortalRegionDto,
} from '.././model';

import { customAxios } from '../../lib/back-api';

export const getGarantRegion = () => {
    /**
     * @summary Создать новый регион
     */
    const regionCreate = (createRegionDto: CreateRegionDto) => {
        return customAxios<RegionEntity>({
            url: `/api/region`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: createRegionDto,
        });
    };
    /**
     * @summary Получить все регионы
     */
    const regionFindAll = () => {
        return customAxios<RegionEntity[]>({
            url: `/api/region`,
            method: 'GET',
        });
    };
    /**
     * @summary Получить регион по ID
     */
    const regionFindOne = (id: string) => {
        return customAxios<RegionEntity>({
            url: `/api/region/${id}`,
            method: 'GET',
        });
    };
    /**
     * @summary Обновить регион
     */
    const regionUpdate = (id: string, createRegionDto: CreateRegionDto) => {
        return customAxios<RegionEntity>({
            url: `/api/region/${id}`,
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            data: createRegionDto,
        });
    };
    /**
     * @summary Обновить регионы из Excel файла
     */
    const regionUpdateFromExcel = () => {
        return customAxios<RegionEntity[]>({
            url: `/api/region/update-from-excel`,
            method: 'POST',
        });
    };
    /**
     * @summary Получить регионы для портала
     */
    const portalRegionGetPortalRegions = (domain: string) => {
        return customAxios<RegionEntity[]>({
            url: `/api/portal-region/${domain}`,
            method: 'GET',
        });
    };
    /**
     * @summary Создать регион для портала
     */
    const portalRegionCreatePortalRegion = (
        createPortalRegionDto: CreatePortalRegionDto,
    ) => {
        return customAxios<RegionEntity[]>({
            url: `/api/portal-region/add`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: createPortalRegionDto,
        });
    };
    /**
     * @summary Обновить AB, налог, налог_abs для региона для портала
     */
    const portalRegionUpdatePortalRegion = (
        updatePortalRegionDto: UpdatePortalRegionDto,
    ) => {
        return customAxios<RegionEntity[]>({
            url: `/api/portal-region/update`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: updatePortalRegionDto,
        });
    };
    /**
     * @summary Удалить регион для портала
     */
    const portalRegionDeletePortalRegion = (
        deletePortalRegionDto: DeletePortalRegionDto,
    ) => {
        return customAxios<RegionEntity[]>({
            url: `/api/portal-region/delete`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: deletePortalRegionDto,
        });
    };
    return {
        regionCreate,
        regionFindAll,
        regionFindOne,
        regionUpdate,
        regionUpdateFromExcel,
        portalRegionGetPortalRegions,
        portalRegionCreatePortalRegion,
        portalRegionUpdatePortalRegion,
        portalRegionDeletePortalRegion,
    };
};
export type RegionCreateResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getGarantRegion>['regionCreate']>>
>;
export type RegionFindAllResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getGarantRegion>['regionFindAll']>>
>;
export type RegionFindOneResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getGarantRegion>['regionFindOne']>>
>;
export type RegionUpdateResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getGarantRegion>['regionUpdate']>>
>;
export type RegionUpdateFromExcelResult = NonNullable<
    Awaited<
        ReturnType<ReturnType<typeof getGarantRegion>['regionUpdateFromExcel']>
    >
>;
export type PortalRegionGetPortalRegionsResult = NonNullable<
    Awaited<
        ReturnType<
            ReturnType<typeof getGarantRegion>['portalRegionGetPortalRegions']
        >
    >
>;
export type PortalRegionCreatePortalRegionResult = NonNullable<
    Awaited<
        ReturnType<
            ReturnType<typeof getGarantRegion>['portalRegionCreatePortalRegion']
        >
    >
>;
export type PortalRegionUpdatePortalRegionResult = NonNullable<
    Awaited<
        ReturnType<
            ReturnType<typeof getGarantRegion>['portalRegionUpdatePortalRegion']
        >
    >
>;
export type PortalRegionDeletePortalRegionResult = NonNullable<
    Awaited<
        ReturnType<
            ReturnType<typeof getGarantRegion>['portalRegionDeletePortalRegion']
        >
    >
>;
