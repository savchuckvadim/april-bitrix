version: '3.8'

services:
  front-kpi-sales:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP: kpi-sales  
    container_name: april-kpi-sales-${SUFFIX}
    ports:
      - "${PORT_KPI_SALES}:3000"         # API доступен снаружи
    environment:
      - IN_BITRIX=true
      - LOG_FILE_PATH=/app/logs/server.log
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - monitoring  

  front-alfa:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP: alfa 
    container_name: front-alfa-${SUFFIX}
    ports:
      - "${PORT_ALFA}:3000"         # API доступен снаружи
    environment:
      - IN_BITRIX=true
      - LOG_FILE_PATH=/app/logs/server.log
 
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - monitoring

  front-konstructor:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP: konstructor 
    container_name: front-konstructor-${SUFFIX}
    ports:
      - "${PORT_KONSTRUCTOR}:3000"         # API доступен снаружи
    environment:
      - IN_BITRIX=true
      - LOG_FILE_PATH=/app/logs/server.log
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - monitoring

  front-bitrix:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP: bitrix 
    container_name: front-bitrix-${SUFFIX}
    ports:
      - "${PORT_BITRIX}:3000"         # API доступен снаружи
    environment:
      - IN_BITRIX=true
      - LOG_FILE_PATH=/app/logs/server.log
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - monitoring    


  loki:
    image: grafana/loki:2.9.0
    container_name: front-loki-${SUFFIX}
    ports:
      - "${PORT_LOKI}:3100"
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ./loki/config.yaml:/etc/loki/config.yaml
      - ./loki-data:/tmp/loki
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:2.9.0
    container_name: front-promtail-${SUFFIX}
    volumes:
      - ./promtail/config.yaml:/etc/promtail/config.yaml
      - /var/log:/var/log       # системные логи
      - ./logs:/app/logs        # или свои логи, если Next.js пишет сюда
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:10.2.0
    container_name: front-grafana-${SUFFIX}
    ports:
      - "${PORT_GRFANA}:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: front-prometheus-${SUFFIX}
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PORT_PROMETHEUS}:9090"
    networks:
      - monitoring
   
networks:
  monitoring:
    driver: bridge
    name: monitoring

volumes:
  logs_kpi_sales:   
  grafana-storage: 
  loki-data:

    # networks:
    #   - next-kpi-sales-next-net
      

#   nginx:
#     image: nginx:alpine
#     container_name: next-kpi-sales-nginx
#     volumes:
#       - ./nginx/nginx.conf:/etc/nginx/nginx.conf
#     ports:
#       - "5034:80"
#     depends_on:
#       - front-kpi-sales
#     networks:
#       - next-kpi-sales-next-net

# networks:
#   next-kpi-sales-next-net:
#     driver: bridge    
      
  # back-api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: april-api
  #   ports:
  #     - "3000:3000"         # API доступен снаружи
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_URL=mysql://root:secret@localhost:3306/sociopath?schema=public
  #     - PORT=5000
  #   depends_on:
  #     - mysql
  #   restart: unless-stopped

  # redis:
  #   image: redis
  #   container_name: sociopath_mono_redis
  #   ports:
  #     - "6379:6379"


  # mysql:
  #   image: mysql:8.0
  #   container_name: sociopath_mono_db
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: secret
  #     MYSQL_DATABASE: sociopath
  #     MYSQL_USER: user
  #     MYSQL_PASSWORD: secret
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - mysql_data:/var/lib/mysql

# volumes:
#   mysql_data:

