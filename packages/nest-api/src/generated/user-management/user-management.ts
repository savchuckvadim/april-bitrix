/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * April backend
 * API for april-bitrix  hooks and  frontends
 * OpenAPI spec version: 1.0
 */
import type { CreateUserDto, UpdateUserDto, UserResponseDto } from '.././model';

import { customAxios } from '../../lib/back-api';

export const getUserManagement = () => {
    /**
     * @summary Create a new user
     */
    const userCreateUser = (createUserDto: CreateUserDto) => {
        return customAxios<UserResponseDto>({
            url: `/api/users`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: createUserDto,
        });
    };
    /**
     * @summary Get all users
     */
    const userGetAllUsers = () => {
        return customAxios<UserResponseDto[]>({
            url: `/api/users`,
            method: 'GET',
        });
    };
    /**
     * @summary Get user by ID
     */
    const userGetUserById = (id: number) => {
        return customAxios<UserResponseDto>({
            url: `/api/users/${id}`,
            method: 'GET',
        });
    };
    /**
     * @summary Update user
     */
    const userUpdateUser = (id: number, updateUserDto: UpdateUserDto) => {
        return customAxios<UserResponseDto>({
            url: `/api/users/${id}`,
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            data: updateUserDto,
        });
    };
    /**
     * @summary Delete user
     */
    const userDeleteUser = (id: number) => {
        return customAxios<void>({ url: `/api/users/${id}`, method: 'DELETE' });
    };
    /**
     * @summary Get user by email
     */
    const userGetUserByEmail = (email: string) => {
        return customAxios<UserResponseDto>({
            url: `/api/users/email/${email}`,
            method: 'GET',
        });
    };
    /**
     * @summary Get users by client ID
     */
    const userGetUsersByClientId = (clientId: number) => {
        return customAxios<UserResponseDto[]>({
            url: `/api/users/client/${clientId}`,
            method: 'GET',
        });
    };
    /**
     * @summary Get user by Bitrix ID
     */
    const userGetUserByBitrixId = (bitrixId: string) => {
        return customAxios<UserResponseDto>({
            url: `/api/users/bitrix/${bitrixId}`,
            method: 'GET',
        });
    };
    /**
     * @summary Get owner by client ID
     */
    const userGetOwnerByClientId = (clientId: number) => {
        return customAxios<UserResponseDto>({
            url: `/api/users/client/${clientId}/owner`,
            method: 'GET',
        });
    };
    /**
     * @summary Get users by role ID
     */
    const userGetUsersByRoleId = (roleId: number) => {
        return customAxios<UserResponseDto[]>({
            url: `/api/users/role/${roleId}`,
            method: 'GET',
        });
    };
    /**
     * @summary Get active users by client ID
     */
    const userGetActiveUsersByClientId = (clientId: number) => {
        return customAxios<UserResponseDto[]>({
            url: `/api/users/client/${clientId}/active`,
            method: 'GET',
        });
    };
    /**
     * @summary Validate user credentials
     */
    const userValidateCredentials = () => {
        return customAxios<UserResponseDto>({
            url: `/api/users/validate-credentials`,
            method: 'POST',
        });
    };
    return {
        userCreateUser,
        userGetAllUsers,
        userGetUserById,
        userUpdateUser,
        userDeleteUser,
        userGetUserByEmail,
        userGetUsersByClientId,
        userGetUserByBitrixId,
        userGetOwnerByClientId,
        userGetUsersByRoleId,
        userGetActiveUsersByClientId,
        userValidateCredentials,
    };
};
export type UserCreateUserResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getUserManagement>['userCreateUser']>>
>;
export type UserGetAllUsersResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getUserManagement>['userGetAllUsers']>>
>;
export type UserGetUserByIdResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getUserManagement>['userGetUserById']>>
>;
export type UserUpdateUserResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getUserManagement>['userUpdateUser']>>
>;
export type UserDeleteUserResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getUserManagement>['userDeleteUser']>>
>;
export type UserGetUserByEmailResult = NonNullable<
    Awaited<
        ReturnType<ReturnType<typeof getUserManagement>['userGetUserByEmail']>
    >
>;
export type UserGetUsersByClientIdResult = NonNullable<
    Awaited<
        ReturnType<
            ReturnType<typeof getUserManagement>['userGetUsersByClientId']
        >
    >
>;
export type UserGetUserByBitrixIdResult = NonNullable<
    Awaited<
        ReturnType<
            ReturnType<typeof getUserManagement>['userGetUserByBitrixId']
        >
    >
>;
export type UserGetOwnerByClientIdResult = NonNullable<
    Awaited<
        ReturnType<
            ReturnType<typeof getUserManagement>['userGetOwnerByClientId']
        >
    >
>;
export type UserGetUsersByRoleIdResult = NonNullable<
    Awaited<
        ReturnType<ReturnType<typeof getUserManagement>['userGetUsersByRoleId']>
    >
>;
export type UserGetActiveUsersByClientIdResult = NonNullable<
    Awaited<
        ReturnType<
            ReturnType<typeof getUserManagement>['userGetActiveUsersByClientId']
        >
    >
>;
export type UserValidateCredentialsResult = NonNullable<
    Awaited<
        ReturnType<
            ReturnType<typeof getUserManagement>['userValidateCredentials']
        >
    >
>;
