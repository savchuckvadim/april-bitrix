/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["HealthController_healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PrometheusController_index"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send message to telegram */
        post: operations["TelegramController_getTelegram"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bitrix/department/sales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DepartmentEndpointController_getFullDepartment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bitrix/list/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ListController_getListFields"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deals-schedule/move-deal-stages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DealsScheduleController_moveDealStages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deals-schedule/move-deal-stages-queue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DealsScheduleController_moveDealStagesQueue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/hooks/alfa/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AlfaHookController_handleActivity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pbx-smart/domain/{domain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get smarts by domain */
        get: operations["PbxSmartController_getSmartsByDomain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pbx-smart/domain/{domain}/smart/{smartName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get smart by portal and name */
        get: operations["PbxSmartController_getSmartByPortalAndName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pbx-smart/parse/{smartName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Parse smart */
        get: operations["PbxSmartController_parseSmart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pbx-smart/install/domain/{domain}/smart/{smartName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Install smart */
        get: operations["PbxSmartController_installSmart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pbx-smart/install/domain/{domain}/smart/{smartName}/{smartGroup}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Installed smart */
        delete: operations["PbxSmartController_deleteSmart"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portal/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get portal by id */
        get: operations["PortalController_getPortal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portal/domain/{domain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get portal by domain */
        get: operations["PortalController_getPortalByDomain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all portals */
        get: operations["PortalController_getPortals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portal/webhook/{domain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update webhook by domain */
        put: operations["PortalController_updateWebhook"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portal-outer/domain/{domain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get portal by domain */
        get: operations["PortalOuterController_getPortalByDomain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portal-outer/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update portal in online server by domain */
        post: operations["PortalOuterController_updatePortalByDomain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/template-base/offer/{domain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TemplateBaseController_getOfferTemplateByDomain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/template-base/templates/{domain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TemplateBaseController_getTemplatesByDomain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/template-base/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TemplateBaseController_getTemplates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/provider/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProviderController_getProvider"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/provider/domain/{domain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProviderController_getProviderByDomain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kpi-report/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["KpiReportController_getReport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kpi-report/calling-statistic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["KpiReportController_getCallingStatistic"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kpi-report/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["KpiReportDownloadController_excel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/event-sales/flow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EventSalesController_getFlow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/event-sales/bx-activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get activities by lead ID
         * @description Retrieves all activities associated with a specific lead ID from Bitrix24
         */
        post: operations["EventSalesBxActivityController_getFullDepartment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queue/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["QueuePingController_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queue/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["QueuePingController_ping"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/zakupki-offer/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ZakupkiOfferController_createZakupkiOffer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FilesController_download"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/infoblock/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all infoblocks */
        get: operations["InfoblockController_getInfoblocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/infoblock/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get infoblock by code */
        get: operations["InfoblockController_getInfoblockByCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/complect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить все комплекты */
        get: operations["ComplectController_findAll"];
        put?: never;
        /** Создать новый комплект */
        post: operations["ComplectController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/complect/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить комплект по ID */
        get: operations["ComplectController_findOne"];
        /** Обновить комплект */
        put: operations["ComplectController_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/complect/infoblocks/available/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список доступных инфоблоков */
        get: operations["ComplectController_getAvailableInfoblocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/supply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SupplyController_findMany"];
        put: operations["SupplyController_update"];
        post: operations["SupplyController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/supply/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SupplyController_findById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/supply/update-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SupplyController_updateAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/infogroup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["InfogroupController_findMany"];
        put: operations["InfogroupController_update"];
        post: operations["InfogroupController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/infogroup/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["InfogroupController_findById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/region": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить все регионы */
        get: operations["RegionController_findAll"];
        put?: never;
        /** Создать новый регион */
        post: operations["RegionController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/region/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить регион по ID */
        get: operations["RegionController_findOne"];
        /** Обновить регион */
        put: operations["RegionController_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/region/update-from-excel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Обновить регионы из Excel файла */
        post: operations["RegionController_updateFromExcel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portal-region/{domain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить регионы для портала */
        get: operations["PortalRegionController_getPortalRegions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portal-region/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Создать регион для портала */
        post: operations["PortalRegionController_createPortalRegion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portal-region/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Обновить AB, налог, налог_abs для региона для портала */
        post: operations["PortalRegionController_updatePortalRegion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portal-region/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Удалить регион для портала */
        post: operations["PortalRegionController_deletePortalRegion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contract/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ContractGenerateController_generateContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["OfferController_createOffer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/konstructor/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Инициализационные данные для констркутора */
        get: operations["KonstructorInitController_init"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/konstructor/init-supply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["InitSupplyController_initSupply"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/supply/init-deal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["InitDealController_initDeal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alfa/create-deal/{dealId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AlfaController_createDeal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alfa-smart/get-smarts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get smarts */
        get: operations["AlfaSmartController_getSmarts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alfa-smart/get-smart/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get smart fields by id */
        get: operations["AlfaSmartController_getSmartFieldsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alfa-smart/get-smart-categories/{entityTypeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get smart categories */
        get: operations["AlfaSmartController_getSmartCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alfa-smart/get-smart-data/{entityTypeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get smart data by id */
        get: operations["AlfaSmartController_getSmartDataById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alfa-smart/get-all-smarts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all smarts */
        get: operations["AlfaSmartController_getAllSmarts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alfa-smart-item/get-list/{entityTypeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get smarts */
        get: operations["AlfaSmartItemController_getList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alfa-smart-item/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add smart */
        post: operations["AlfaSmartItemController_add"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transcription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start audio transcription */
        post: operations["TranscriptionController_startTranscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transcription/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transcription status and result */
        get: operations["TranscriptionController_getTranscriptionResult"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OfferTemplateController_findAllOfferTemplate"];
        put?: never;
        /**
         * Create offer template
         * @description Create a new offer template
         */
        post: operations["OfferTemplateController_createOfferTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-templates/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OfferTemplateController_findPublic"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-templates/portal/{portal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OfferTemplateController_findByPortal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-templates/user/{user_id}/portal/{portal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OfferTemplateController_findUserTemplates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-templates/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OfferTemplateController_findOne"];
        put?: never;
        post?: never;
        delete: operations["OfferTemplateController_remove"];
        options?: never;
        head?: never;
        patch: operations["OfferTemplateController_update"];
        trace?: never;
    };
    "/api/offer-templates/{id}/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OfferTemplateController_findOneWithRelations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-templates/{id}/increment-counter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["OfferTemplateController_incrementCounter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-templates/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["OfferTemplateController_setActiveOfferTemplate"];
        trace?: never;
    };
    "/api/offer-templates/{id}/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["OfferTemplateController_setDefault"];
        trace?: never;
    };
    "/api/offer-template-fonts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OfferTemplateFontController_findAllOfferTemplateFont"];
        put?: never;
        post: operations["OfferTemplateFontController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-fonts/template/{template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OfferTemplateFontController_findByTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-fonts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OfferTemplateFontController_findOne"];
        put?: never;
        post?: never;
        delete: operations["OfferTemplateFontController_remove"];
        options?: never;
        head?: never;
        patch: operations["OfferTemplateFontController_update"];
        trace?: never;
    };
    "/api/offer-template-fonts/{id}/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OfferTemplateFontController_findOneWithRelations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all offer template images
         * @description Get all offer template images
         */
        get: operations["OfferTemplateImageController_findAllOfferTemplateImage"];
        put?: never;
        /**
         * Create offer template image
         * @description Create a new offer template image
         */
        post: operations["OfferTemplateImageController_createOfferTemplateImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-images/portal/{portal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer template images by portal
         * @description Get offer template images by portal
         */
        get: operations["OfferTemplateImageController_findByPortal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-images/parent/{parent}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer template images by parent
         * @description Get offer template images by parent
         */
        get: operations["OfferTemplateImageController_findByParent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-images/storage/{storage_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer template images by storage type
         * @description Get offer template images by storage type
         */
        get: operations["OfferTemplateImageController_findByStorageType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-images/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer template image by id
         * @description Get offer template image by id
         */
        get: operations["OfferTemplateImageController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete offer template image
         * @description Delete offer template image
         */
        delete: operations["OfferTemplateImageController_remove"];
        options?: never;
        head?: never;
        /**
         * Update offer template image
         * @description Update offer template image
         */
        patch: operations["OfferTemplateImageController_update"];
        trace?: never;
    };
    "/api/offer-template-images/{id}/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer template image by id with relations
         * @description Get offer template image by id with relations
         */
        get: operations["OfferTemplateImageController_findOneWithRelations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-images/{id}/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set public offer template image
         * @description Set public offer template image
         */
        patch: operations["OfferTemplateImageController_setPublic"];
        trace?: never;
    };
    "/api/offer-template-pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all offer template pages
         * @description Get all offer template pages
         */
        get: operations["OfferTemplatePageController_findAll"];
        put?: never;
        /**
         * Create offer template page
         * @description Create a new offer template page
         */
        post: operations["OfferTemplatePageController_createOfferTemplatePage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-pages/template/{template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer template pages by template
         * @description Get offer template pages by template
         */
        get: operations["OfferTemplatePageController_findByTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-pages/template/{template_id}/with-blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer template pages by template with blocks
         * @description Get offer template pages by template with blocks
         */
        get: operations["OfferTemplatePageController_findByTemplateWithBlocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-pages/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer template page by id
         * @description Get offer template page by id
         */
        get: operations["OfferTemplatePageController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete offer template page
         * @description Delete offer template page
         */
        delete: operations["OfferTemplatePageController_remove"];
        options?: never;
        head?: never;
        /**
         * Update offer template page
         * @description Update offer template page
         */
        patch: operations["OfferTemplatePageController_update"];
        trace?: never;
    };
    "/api/offer-template-pages/{id}/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer template page by id with relations
         * @description Get offer template page by id with relations
         */
        get: operations["OfferTemplatePageController_findOneWithRelations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-pages/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set active offer template page
         * @description Set active offer template page
         */
        patch: operations["OfferTemplatePageController_setActivePage"];
        trace?: never;
    };
    "/api/offer-template-pages/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reorder offer template pages
         * @description Reorder offer template pages
         */
        post: operations["OfferTemplatePageController_reorderPages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-page-blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create offer template page block
         * @description Create a new offer template page block
         */
        post: operations["OfferTemplatePageBlockController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-page-blocks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer template page block by id
         * @description Get offer template page block by id
         */
        get: operations["OfferTemplatePageBlockController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete offer template page block
         * @description Delete offer template page block
         */
        delete: operations["OfferTemplatePageBlockController_remove"];
        options?: never;
        head?: never;
        /**
         * Update offer template page block
         * @description Update offer template page block
         */
        patch: operations["OfferTemplatePageBlockController_update"];
        trace?: never;
    };
    "/api/offer-template-page-blocks/{id}/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer template page block by id with relations
         * @description Get offer template page block by id with relations
         */
        get: operations["OfferTemplatePageBlockController_findOneWithRelations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-page-blocks/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reorder offer template page blocks
         * @description Reorder offer template page blocks
         */
        post: operations["OfferTemplatePageBlockController_reorderBlocks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-page-stickers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["OfferTemplatePageStickerController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-page-stickers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["OfferTemplatePageStickerController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-page-stickers/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["OfferTemplatePageStickerController_reorderStickers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-portals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["OfferTemplatePortalController_createOfferTemplatePortal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-portals/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["OfferTemplatePortalController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offer-template-portals/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["OfferTemplatePortalController_setActiveTemplatePortal"];
        trace?: never;
    };
    "/api/offer-template-portals/{id}/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["OfferTemplatePortalController_setDefault"];
        trace?: never;
    };
    "/api/user-selected-templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UserSelectedTemplateController_createUserSelectedTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-selected-templates/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["UserSelectedTemplateController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-selected-templates/{id}/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UserSelectedTemplateController_setCurrent"];
        trace?: never;
    };
    "/api/user-selected-templates/{id}/favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UserSelectedTemplateController_setFavorite"];
        trace?: never;
    };
    "/api/user-selected-templates/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UserSelectedTemplateController_setActiveUserSelectedTemplate"];
        trace?: never;
    };
    "/api/bx/department": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get full department information */
        post: operations["DepartmentController_getFullDepartment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/helper/bitrix/method": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Call bitrix method */
        post: operations["HelperController_bitrixMethod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TelegramSendMessageDto: {
            /** @enum {string} */
            app: "kpi_sales" | "konstruktor";
            /** @description Text message */
            text: string;
            /**
             * @description Domain
             * @example example.bitrix24.ru
             */
            domain: string;
            /** @description User ID */
            userId: string;
        };
        DomainDto: {
            /** @enum {string} */
            domain: "april-dev.bitrix24.ru" | "april-garant.bitrix24.ru" | "gsr.bitrix24.ru" | "gsirk.bitrix24.ru" | "alfacentr.bitrix24.ru";
        };
        GetBxListDto: {
            /** @example example.bitrix24.ru */
            domain: string;
        };
        UpdateWebhookDto: {
            /**
             * @description The webhook URL
             * @example https://example.com/webhook
             */
            webhook: string;
        };
        UpdatePortalDto: {
            domain: string;
            number: number;
            key: string;
            clientId: string;
            clientSecret: string;
            hook: string;
        };
        BXUserDto: {
            ID: string;
            NAME: string;
            LAST_NAME: string;
        };
        ReportGetFiltersDto: {
            dateFrom: string;
            dateTo: string;
            userIds: string[];
            departament: components["schemas"]["BXUserDto"][];
            userFieldId: string;
            dateFieldId: string;
            actionFieldId: string;
            currentActions: Record<string, never>;
        };
        ReportGetRequestDto: {
            domain: string;
            filters: components["schemas"]["ReportGetFiltersDto"];
        };
        GetCallingStatisticFiltersDto: {
            departament: components["schemas"]["BXUserDto"][];
            dateFrom: string;
            dateTo: string;
        };
        GetCallingStatisticDto: {
            domain: string;
            filters: components["schemas"]["GetCallingStatisticFiltersDto"];
        };
        KpiReportDto: Record<string, never>;
        EventSalesFlowDto: Record<string, never>;
        BxActivityDto: {
            /**
             * @description Domain of the Bitrix24 portal
             * @example example.bitrix24.ru
             */
            domain: string;
            /**
             * @description ID of the lead in Bitrix24
             * @example 12345
             */
            leadId: number;
        };
        QueuePingDto: Record<string, never>;
        ZakupkiOfferCreateDto: Record<string, never>;
        CreateComplectDto: {
            /**
             * @description Название комплекта
             * @example Гарант Бухгалтер
             */
            name: string;
            /**
             * @description Полное название комплекта
             * @example Гарант Бухгалтер
             */
            fullName: string;
            /**
             * @description Короткое название комплекта
             * @example Бухгалтер
             */
            shortName: string;
            /**
             * @description Описание комплекта
             * @example для Бухгалтера
             */
            description?: string;
            /**
             * @description Код комплекта
             * @example buh
             */
            code: string;
            /**
             * @description Тип комплекта
             * @example prof
             * @enum {string}
             */
            type: "prof" | "universal";
            /**
             * @description Цвет комплекта
             * @example #FF0000
             */
            color?: string;
            /**
             * @description Вес комплекта
             * @example 3.5
             */
            weight: number;
            /**
             * @description ABS комплекта
             * @example 1.5
             */
            abs?: string;
            /**
             * @description Номер комплекта
             * @example 1
             */
            number: number;
            /**
             * @description Тип продукта
             * @example garant
             * @enum {string}
             */
            productType: "garant" | "lt" | "star" | "consalting";
            /**
             * @description Наличие ABS
             * @example false
             */
            withABS: boolean;
            /**
             * @description Наличие консалтинга
             * @example false
             */
            withConsalting: boolean;
            /**
             * @description Наличие сервисов
             * @example true
             */
            withServices: boolean;
            /**
             * @description Наличие LT
             * @example false
             */
            withLt: boolean;
            /**
             * @description Изменяемый комплект
             * @example true
             */
            isChanging: boolean;
            /**
             * @description Есть ли наполнение по умолчанию
             * @example false
             */
            withDefault: boolean;
            /**
             * @description Список ID инфоблоков, входящих в комплект
             * @example [
             *       "1",
             *       "2",
             *       "3"
             *     ]
             */
            infoblockIds: string[];
        };
        ComplectEntity: Record<string, never>;
        InfoblockLightEntity: Record<string, never>;
        CreateRegionDto: {
            /**
             * @description Номер региона
             * @example 1
             */
            number: number;
            /**
             * @description Название региона
             * @example Москва
             */
            title: string;
            /**
             * @description Код региона
             * @example MSK
             */
            code: string;
            /**
             * @description Инфоблок региона
             * @example region-moscow
             */
            infoblock: string;
            /**
             * @description ABS региона
             * @example 1000.5
             */
            abs: number;
            /**
             * @description Налог региона
             * @example 20.5
             */
            tax: number;
            /**
             * @description Налог ABS региона
             * @example 200.5
             */
            tax_abs: number;
        };
        RegionEntity: Record<string, never>;
        CreatePortalRegionDto: {
            /**
             * @description Domain of the Bitrix24 portal
             * @example april-dev.bitrix24.ru
             */
            domain: string;
            /**
             * @description Code of the region
             * @example kbr
             */
            regionCode: string;
        };
        UpdatePortalRegionDto: {
            /**
             * @description Domain of the Bitrix24 portal
             * @example april-dev.bitrix24.ru
             */
            domain: string;
            /**
             * @description Code of the region
             * @example kbr
             */
            regionCode: string;
            /**
             * @description Own AB
             * @example 1000
             */
            own_abs: Record<string, never>;
            /**
             * @description Own tax
             * @example 1000
             */
            own_tax: Record<string, never>;
            /**
             * @description Own tax abs
             * @example 1000
             */
            own_tax_abs: Record<string, never>;
        };
        DeletePortalRegionDto: {
            /**
             * @description ID of the portal
             * @example 1
             */
            portalId: number;
            /**
             * @description ID of the region
             * @example 1
             */
            regionId: number;
        };
        PlacementDto: {
            /** @description Placement of the contract */
            placement: string;
            /** @description Options of the placement */
            options: Record<string, never>;
        };
        ComplectValueDto: {
            /** @description Name of the complect value */
            name: string;
            /** @description Title of the complect value */
            title: string;
            /** @description Number of the complect value */
            number: number;
            /** @description Code of the complect value */
            code: string;
            /** @description Checked of the complect value */
            checked: boolean;
            /** @description Weight of the complect value */
            weight: number;
            /** @description Description of the complect value */
            description: string;
            /** @description Is LA of the complect value */
            isLa: boolean;
        };
        ComplectDto: {
            /** @description Name of the complect */
            groupsName: string;
            /** @description Value of the complect */
            value: components["schemas"]["ComplectValueDto"][];
        };
        SupplyDto: {
            /** @description Contract prop supplies quantity */
            contractPropSuppliesQuantity: number;
            /** @description Contract prop 2 */
            lcontractProp2: string;
            /** @description Contract name */
            lcontractName: string;
            /** @description Contract prop email */
            lcontractPropEmail: string;
            /** @description Type */
            type: string;
            /** @description Contract prop logins quantity */
            contractPropLoginsQuantity: string;
            /** @description Number */
            number: number;
            /** @description Acontract name */
            acontractName: string;
            /** @description Contract prop comment */
            contractPropComment: string;
            /** @description Contract prop email */
            contractPropEmail: string;
            /** @description Quantity for KP */
            quantityForKp: string;
            /** @description Name */
            name: string;
            /** @description Coefficient */
            coefficient: number;
            /** @description Acontract prop comment */
            acontractPropComment: string;
            /** @description Contract name */
            contractName: string;
            /** @description Contract prop comment */
            lcontractPropComment: string;
            /** @description Contract prop 1 */
            contractProp1: string;
        };
        SupplyFieldDto: {
            /** @description Name of the supply field */
            name: string;
            /** @description Code of the supply field */
            code: string;
            /** @description Is active of the supply field */
            isActive: boolean;
            /** @description Type of the supply field */
            type: string;
            /** @description Order of the supply field */
            order: number;
            /** @description Default value of the supply field */
            defaultValue: Record<string, never>;
            /** @description Value of the supply field */
            value: Record<string, never>;
            /** @description Supply of the supply field */
            supply: components["schemas"]["SupplyDto"];
        };
        CellsGroupDto: {
            /** @description Name of the cells group */
            name: string;
            /** @description Cells of the cells group */
            cells: components["schemas"]["SupplyFieldDto"][];
            /** @description Target of the cells group */
            target: string;
        };
        CellsWrapper: {
            /** @description General of the cells wrapper */
            general: components["schemas"]["CellsGroupDto"][];
            /** @description Alternative of the cells wrapper */
            alternative: components["schemas"]["CellsGroupDto"][];
            /** @description Total of the cells wrapper */
            total: components["schemas"]["CellsGroupDto"][];
        };
        OfferOptionsDto: {
            /** @description Year of the offer options */
            year: Record<string, never>;
            /** @description Price of the offer options */
            price: Record<string, never>;
            /** @description Discount of the offer options */
            discount: Record<string, never>;
            /** @description Measure of the offer options */
            measure: Record<string, never>;
            /** @description Supply of the offer options */
            supply: components["schemas"]["SupplyDto"];
        };
        PriceDto: {
            /** @description Cells of the price */
            cells: components["schemas"]["CellsWrapper"];
            /** @description Options of the price */
            options: components["schemas"]["OfferOptionsDto"];
            /** @description Is default show of the price */
            isDefaultShow: boolean;
            /** @description Is table of the price */
            isTable: boolean;
            /** @description Is one measure of the price */
            isOneMeasure: boolean;
            /** @description Is discount show of the price */
            isDiscountShow: boolean;
            /** @description Is supply long of the price */
            isSupplyLong: boolean;
            /** @description Prepayment style of the price */
            prepaymentStyle: string;
        };
        ContracPortaltDto: {
            /** @description ID of the contract */
            id: number;
            /** @description Name of the contract */
            name: string;
            /** @description Short name of the contract */
            shortName: string;
            /** @description Full name of the contract */
            fullName: string;
            /** @description Created at of the contract */
            created_at: string;
            /** @description Updated at of the contract */
            updated_at: Record<string, never>;
        };
        ContractMeasureDto: {
            /** @description ID of the measure */
            id: number;
            /** @description Measure ID of the measure */
            measure_id: number;
            /** @description Portal ID of the measure */
            portal_id: number;
            /** @description Bitrix ID of the measure */
            bitrixId: string;
            /** @description Name of the measure */
            name: string;
            /** @description Short name of the measure */
            shortName: string;
            /** @description Full name of the measure */
            fullName: string;
            /** @description Created at of the measure */
            created_at: string;
            /** @description Updated at of the measure */
            updated_at: string;
            /** @description Measure of the measure */
            measure: Record<string, never>;
        };
        ContractDto: {
            /** @description ID of the contract */
            id: number;
            /** @description Contract of the contract */
            contract: components["schemas"]["ContracPortaltDto"];
            /** @description Code of the contract */
            code: string;
            /** @description Short name of the contract */
            shortName: string;
            /** @description Number of the contract */
            number: number;
            /** @description April name of the contract */
            aprilName: string;
            /** @description Bitrix name of the contract */
            bitrixName: string;
            /** @description Discount of the contract */
            discount: number;
            /** @description Item ID of the contract */
            itemId: number;
            /** @description Prepayment of the contract */
            prepayment: number;
            /** @description Order of the contract */
            order: number;
            /** @description Portal measure of the contract */
            portalMeasure: components["schemas"]["ContractMeasureDto"];
            /** @description Measure code of the contract */
            measureCode: number;
            /** @description Measure full name of the contract */
            measureFullName: string;
            /** @description Measure ID of the contract */
            measureId: number;
            /** @description Measure name of the contract */
            measureName: string;
            /** @description Measure number of the contract */
            measureNumber: number;
        };
        RegionsDto: Record<string, never>;
        RegionDto: Record<string, never>;
        ProductRowDto: Record<string, never>;
        ProductRowSetDto: Record<string, never>;
        BxRqAddressDto: {
            /** @description Items of the RQ */
            items: string[];
        };
        BxRqBankItemDto: {
            /** @description Id of the RQ */
            id: number;
            /** @description Fields of the RQ */
            fields: string[];
        };
        BxRqBankDto: {
            /** @description Current of the RQ */
            current: components["schemas"]["BxRqBankItemDto"];
            /** @description Items of the RQ */
            items: string[];
        };
        BxRqDto: {
            /** @description Address of the RQ */
            address: components["schemas"]["BxRqAddressDto"];
            /** @description Bank of the RQ */
            bank: components["schemas"]["BxRqBankDto"];
            /** @description Preset ID of the RQ */
            preset_id: number;
            /** @description Fields of the RQ */
            fields: string[];
        };
        ContractSpecificationDto: Record<string, never>;
        ContractGenerateDto: {
            /** @description Domain of the company */
            domain: string;
            /** @description ID of the company */
            companyId: string;
            /** @description Placement of the contract */
            placement: components["schemas"]["PlacementDto"];
            /** @description Is the contract a product */
            isProd: boolean;
            /** @description ID of the deal */
            dealId: string;
            /** @description ID of the provider */
            providerId: number;
            /** @description ID of the user */
            userId: number;
            /**
             * @description Type of the contract
             * @enum {string}
             */
            contractType: "service" | "abon" | "lic" | "key";
            /** @description Complect of the contract */
            complect: components["schemas"]["ComplectDto"][];
            /** @description Supply of the contract */
            supply: components["schemas"]["SupplyDto"];
            /** @description Price of the contract */
            price: components["schemas"]["PriceDto"];
            /** @description Contract of the contract */
            contract: components["schemas"]["ContractDto"];
            /** @description Regions of the contract */
            regions: components["schemas"]["RegionsDto"];
            /** @description Region of the contract */
            region: components["schemas"]["RegionDto"];
            /** @description Rows of the contract */
            rows: components["schemas"]["ProductRowDto"][];
            /** @description Total of the contract */
            total: components["schemas"]["ProductRowDto"];
            /** @description Product set of the contract */
            productSet: components["schemas"]["ProductRowSetDto"];
            /** @description Contract start of the contract */
            contractStart: string;
            /** @description Contract end of the contract */
            contractEnd: string;
            /** @description Contract number of the contract */
            contractNumber: string;
            /** @description Contract create date of the contract */
            contractCreateDate: string;
            /** @description Garant client assigned name of the contract */
            garantClientAssignedName: string;
            /** @description Garant client assigned email of the contract */
            garantClientEmail: string;
            /** @description First pay date of the contract */
            firstPayDate: string;
            /**
             * @description Client type of the contract
             * @enum {string}
             */
            clientType: "org_state" | "org" | "ip" | "fiz";
            /** @description BxRQ of the contract */
            bxrq: components["schemas"]["BxRqDto"];
            /** @description Contract specification state of the contract */
            contractSpecificationState: components["schemas"]["ContractSpecificationDto"];
        };
        OfferDto: Record<string, never>;
        ContactIdDto: {
            /** @description Contacts ID */
            ID: string;
        };
        /**
         * @description Contract type
         * @enum {string}
         */
        CONTRACT_LTYPE: "service" | "abon" | "lic" | "key";
        ClientTypeDto: {
            /** @description Client type */
            code: string;
            /** @description Client type */
            name: string;
        };
        SupplyReportDto: {
            /** @description Type of the FormFieldDto */
            type: string;
            /** @description Name of the FormFieldDto */
            name: string;
            /** @description IsRequired of the FormFieldDto */
            isRequired: boolean;
            /** @description Includes of the FormFieldDto */
            includes: string[];
            /** @description Supplies of the FormFieldDto */
            supplies: string[];
            /** @description ContractType of the FormFieldDto */
            contractType: string[];
            /** @description Group of the FormFieldDto */
            group: string;
            /** @description IsActive of the FormFieldDto */
            isActive: boolean;
            /** @description IsDisable of the FormFieldDto */
            isDisable: boolean;
            /** @description Order of the FormFieldDto */
            order: number;
            /** @description Component of the FormFieldDto */
            component: string;
            /** @description IsHidden of the FormFieldDto */
            isHidden: boolean;
            /** @description Value of the FormFieldDto */
            value: Record<string, never>;
        };
        PbxDealDto: Record<string, never>;
        PbxCompanyDto: Record<string, never>;
        InitSupplyDto: {
            /** @description Domain of the supply */
            domain: string;
            /** @description RPA ID of the supply */
            rpa_id: Record<string, never>;
            /** @description ID of the provider */
            providerId: number;
            /** @description User ID of the supply */
            userId: Record<string, never>;
            /** @description Company ID of the supply */
            companyId: Record<string, never>;
            /** @description Company name of the supply */
            companyName: string;
            /** @description Base deal ID of the supply */
            dealId: Record<string, never>;
            /** @description Service smart ID of the supply */
            serviceSmartId: Record<string, never>;
            /** @description Contacts  */
            bxContacts: components["schemas"]["ContactIdDto"];
            /** @description Contract  */
            contract: components["schemas"]["ContractDto"];
            /** @description Contract type */
            contractType: components["schemas"]["CONTRACT_LTYPE"];
            /** @description Regions  */
            regions: components["schemas"]["RegionsDto"];
            /** @description Region  */
            region: components["schemas"]["RegionDto"];
            /** @description BxRQ of client */
            bxrq: components["schemas"]["BxRqDto"];
            /** @description Client type */
            clientType: components["schemas"]["ClientTypeDto"];
            /** @description Contract specification state of the contract */
            contractSpecificationState: components["schemas"]["ContractSpecificationDto"];
            /** @description Supply report form fields */
            supplyReport: components["schemas"]["SupplyReportDto"];
            /** @description PbxDealDto of the supply report */
            bxDealItems: components["schemas"]["PbxDealDto"];
            /** @description PbxCompanyDto of the supply report */
            bxCompanyItems: components["schemas"]["PbxCompanyDto"];
            /** @description File of current supply report */
            file: string;
            /** @description Complect arm ids */
            complectArmIds: string[];
            /** @description Client arm id */
            clientArmId: string;
            /** @description Supply */
            supply: components["schemas"]["SupplyDto"];
            /** @description Total sum */
            total: number;
        };
        BitrixHookAuthRequestDto: {
            /** @description Bitrix hook domain */
            domain: string;
        };
        InitDealDto: {
            /** @description Bitrix hook auth */
            auth: components["schemas"]["BitrixHookAuthRequestDto"];
            /** @description Document id info */
            document_id: string[];
        };
        AuthDto: {
            /** @example example.bitrix24.ru */
            domain: string;
        };
        CreateDealBodyDto: {
            auth: components["schemas"]["AuthDto"];
        };
        SmartItemDto: {
            /** @example Test */
            title: string;
            /** @example [
             *       "Test"
             *     ] */
            ufCrm12AccountantGos: string[];
            /** @example [
             *       "Test"
             *     ] */
            ufCrm12AccountantMedical: string[];
            /** @example [
             *       "Test"
             *     ] */
            ufCrm12Zakupki: string[];
            /** @example [
             *       "Test"
             *     ] */
            ufCrm12Kadry: string[];
            /** @example [
             *       "Test"
             *     ] */
            ufCrm12Days: string[];
            /** @example [
             *       "Test"
             *     ] */
            ufCrm12Format: string[];
            /** @example Test */
            ufCrm12AddressForUdost: string;
            /** @example Test */
            ufCrm12Phone: string;
            /** @example Test */
            ufCrm12Email: string;
            /** @example Test */
            ufCrm12Comment: string;
            /** @example Test */
            ufCrm12IsPpk: string;
            /**
             * @description ФИО
             * @example Test
             */
            ufCrm12Name: string;
            /**
             * @description dealId
             * @example 33962
             */
            parentId2: number;
            /**
             * @description contactId
             * @example 44448
             */
            contactId: number;
            /**
             * @description companyId
             * @example 350088
             */
            companyId: number;
        };
        AddSmartItemDto: {
            /** @enum {number} */
            entityTypeId: 1036;
            item: components["schemas"]["SmartItemDto"];
        };
        TranscriptionRequestDto: {
            /** @description URL of the audio file to transcribe */
            fileUrl: string;
            /** @description Name of the audio file */
            fileName: string;
            /** @description User ID */
            userId: string;
            /** @description User name */
            userName: string;
            /** @description Application name */
            appName: string;
            /** @description Activity ID */
            activityId: string;
            /** @description File ID */
            fileId: string;
            /** @description Duration of the audio file */
            duration: string;
            /** @description Department */
            department: string;
            /** @description Entity type */
            entityType: string;
            /** @description Entity ID */
            entityId: string;
            /** @description Entity ID */
            entityName: string;
            /** @description Domain of the portal */
            domain: string;
        };
        TranscriptionResponseDto: {
            /** @description Task ID for tracking transcription status */
            taskId: string;
            /**
             * @description Status of the transcription task
             * @enum {string}
             */
            status: "started" | "processing" | "done" | "error";
            /** @description Transcribed text (if status is done) */
            text?: string;
            /** @description Error message (if status is error) */
            error?: string;
            /** @description Transcription ID */
            transcriptionId: number;
        };
        /**
         * @description The visibility of the offer template
         * @enum {string}
         */
        OfferTemplateVisibility: "public" | "private" | "user";
        /**
         * @description The type of the offer template page
         * @enum {string}
         */
        PageType: "letter" | "description" | "infoblocks" | "price" | "lt" | "other" | "default";
        /**
         * @description The type of the offer template page block
         * @enum {string}
         */
        BlockType: "background" | "about" | "hero" | "letter" | "documentNumber" | "manager" | "logo" | "stamp" | "header" | "footer" | "infoblocks" | "price" | "slogan" | "infoblocksDescription" | "lt" | "otherComplects" | "comparison" | "comparisonComplects" | "comparisonIblocks" | "user" | "default";
        CreateOfferTemplatePageBlockDto: {
            /** @description The offer template page id */
            offer_template_page_id: number;
            /** @description The order of the offer template page block */
            order: number;
            /** @description The name of the offer template page block */
            name: string;
            /** @description The code of the offer template page block */
            code: string;
            /** @description The type of the offer template page block */
            type: components["schemas"]["BlockType"];
            /** @description The content of the offer template page block */
            content: string;
            /** @description The settings of the offer template page block */
            settings: string;
            /** @description The stickers of the offer template page block */
            stickers: string;
            /** @description The background of the offer template page block */
            background: string;
            /** @description The colors of the offer template page block */
            colors: string;
            /** @description The image id of the offer template page block */
            image_id: number;
        };
        CreateOfferTemplatePageStickerDto: {
            /** @description The offer template page id */
            offer_template_page_id: number;
            /** @description The order of the offer template page sticker */
            order: number;
            /** @description The name of the offer template page sticker */
            name: string;
            /** @description The code of the offer template page sticker */
            code: string;
            /** @description The size of the offer template page sticker */
            size: string;
            /** @description The height of the offer template page sticker */
            height: string;
            /** @description The width of the offer template page sticker */
            width: string;
            /** @description The position of the offer template page sticker */
            position: string;
            /** @description The style of the offer template page sticker */
            style: string;
            /** @description The settings of the offer template page sticker */
            settings: string;
            /** @description The background of the offer template page sticker */
            background: string;
            /** @description The colors of the offer template page sticker */
            colors: string;
            /** @description The image id of the offer template page sticker */
            image_id: number;
        };
        CreateOfferTemplatePageDto: {
            /** @description The offer template id */
            offer_template_id: number;
            /** @description The order of the offer template page */
            order: number;
            /** @description The name of the offer template page */
            name: string;
            /** @description The code of the offer template page */
            code: string;
            /** @description The type of the offer template page */
            type: components["schemas"]["PageType"];
            /** @description Whether the offer template page is active */
            is_active: boolean;
            /** @description The settings of the offer template page */
            settings: string;
            /** @description The stickers of the offer template page */
            stickers: string;
            /** @description The background of the offer template page */
            background: string;
            /** @description The colors of the offer template page */
            colors: string;
            /** @description The fonts of the offer template page */
            fonts: string;
            /** @description The blocks of the offer template page */
            blocks: components["schemas"]["CreateOfferTemplatePageBlockDto"][];
            /** @description The stickers of the offer template page */
            stickers_items: components["schemas"]["CreateOfferTemplatePageStickerDto"][];
        };
        CreateOfferTemplateFontDto: {
            /** @description The offer template id */
            offer_template_id: number;
            /** @description The name of the offer template font */
            name: string;
            /** @description The code of the offer template font */
            code: string;
            /** @description The data of the offer template font */
            data: string;
            /** @description The items of the offer template font */
            items: string;
            /** @description The current of the offer template font */
            current: string;
            /** @description The settings of the offer template font */
            settings: string;
        };
        CreateOfferTemplateDto: {
            /** @description The name of the offer template */
            domain: string;
            /** @description The name of the offer template */
            name: string;
            /** @description The visibility of the offer template */
            visibility: components["schemas"]["OfferTemplateVisibility"];
            /** @description Whether the offer template is default */
            is_default: boolean;
            /** @description The file path of the offer template */
            file_path: string;
            /** @description The demo path of the offer template */
            demo_path: string;
            /** @description The type of the offer template */
            type: string;
            /** @description The rules of the offer template */
            price_settings: string;
            /** @description The infoblock settings of the offer template */
            infoblock_settings: string;
            /** @description The letter text of the offer template */
            letter_text: string;
            /** @description The sale text 1 of the offer template */
            sale_text_1: string;
            /** @description The sale text 2 of the offer template */
            sale_text_2: string;
            /** @description The sale text 3 of the offer template */
            sale_text_3: string;
            /** @description The sale text 4 of the offer template */
            sale_text_4: string;
            /** @description The sale text 5 of the offer template */
            sale_text_5: string;
            /** @description The field codes of the offer template */
            field_codes: string;
            /** @description The style of the offer template */
            style: string;
            /** @description The color of the offer template */
            color: string;
            /** @description The code of the offer template */
            code: string;
            /** @description The tags of the offer template */
            tags: string;
            /** @description Whether the offer template is active */
            is_active: boolean;
            /** @description The counter of the offer template */
            counter: number;
            /** @description The pages of the offer template */
            pages: components["schemas"]["CreateOfferTemplatePageDto"][];
            /** @description The fonts of the offer template */
            fonts: components["schemas"]["CreateOfferTemplateFontDto"][];
        };
        UpdateOfferTemplateDto: Record<string, never>;
        UpdateOfferTemplateFontDto: Record<string, never>;
        CreateOfferTemplateImageDto: Record<string, never>;
        /** @enum {string} */
        StorageType: "app" | "public" | "private";
        /** @enum {string} */
        ImageParent: "template" | "page" | "block" | "sticker" | "other";
        UpdateOfferTemplateImageDto: Record<string, never>;
        UpdateOfferTemplatePageDto: Record<string, never>;
        PageOrderDto: {
            /**
             * @description The page id
             * @example 1
             */
            id: number;
            /**
             * @description The page order
             * @example 1
             */
            order: number;
        };
        ReorderPagesDto: {
            /**
             * @description The template id
             * @example 1
             */
            template_id: number;
            /** @description The page orders */
            page_orders: components["schemas"]["PageOrderDto"][];
        };
        UpdateOfferTemplatePageBlockDto: Record<string, never>;
        BlockOrderDto: {
            /**
             * @description The block id
             * @example 1
             */
            id: number;
            /**
             * @description The block order
             * @example 1
             */
            order: number;
        };
        ReorderBlocksDto: {
            /**
             * @description The page id
             * @example 1
             */
            page_id: number;
            /** @description The block orders */
            block_orders: components["schemas"]["BlockOrderDto"][];
        };
        StickerOrderDto: {
            /**
             * @description The sticker id
             * @example 1
             */
            id: number;
            /**
             * @description The sticker order
             * @example 1
             */
            order: number;
        };
        ReorderStickersDto: {
            /**
             * @description The page id
             * @example 1
             */
            page_id: number;
            /** @description The sticker orders */
            sticker_orders: components["schemas"]["StickerOrderDto"][];
        };
        CreateOfferTemplatePortalDto: Record<string, never>;
        CreateUserSelectedTemplateDto: Record<string, never>;
        BxDepartmentDto: {
            /**
             * @description Domain of the Bitrix24 portal
             * @example april-garant.bitrix24.ru
             * @enum {string}
             */
            domain: "april-dev.bitrix24.ru" | "april-garant.bitrix24.ru" | "gsr.bitrix24.ru" | "gsirk.bitrix24.ru" | "alfacentr.bitrix24.ru";
            /**
             * @description Department group to filter by
             * @example sales
             * @enum {string}
             */
            department?: "sales" | "service" | "tmc";
        };
        BitrixMethodDto: {
            /** @description Domain of the portal */
            domain: string;
            /** @description Method of the bitrix */
            method: string;
            /** @description Params of the bitrix */
            bxData: Record<string, never>;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaTelegramSendMessageDto = components['schemas']['TelegramSendMessageDto'];
export type SchemaDomainDto = components['schemas']['DomainDto'];
export type SchemaGetBxListDto = components['schemas']['GetBxListDto'];
export type SchemaUpdateWebhookDto = components['schemas']['UpdateWebhookDto'];
export type SchemaUpdatePortalDto = components['schemas']['UpdatePortalDto'];
export type SchemaBxUserDto = components['schemas']['BXUserDto'];
export type SchemaReportGetFiltersDto = components['schemas']['ReportGetFiltersDto'];
export type SchemaReportGetRequestDto = components['schemas']['ReportGetRequestDto'];
export type SchemaGetCallingStatisticFiltersDto = components['schemas']['GetCallingStatisticFiltersDto'];
export type SchemaGetCallingStatisticDto = components['schemas']['GetCallingStatisticDto'];
export type SchemaKpiReportDto = components['schemas']['KpiReportDto'];
export type SchemaEventSalesFlowDto = components['schemas']['EventSalesFlowDto'];
export type SchemaBxActivityDto = components['schemas']['BxActivityDto'];
export type SchemaQueuePingDto = components['schemas']['QueuePingDto'];
export type SchemaZakupkiOfferCreateDto = components['schemas']['ZakupkiOfferCreateDto'];
export type SchemaCreateComplectDto = components['schemas']['CreateComplectDto'];
export type SchemaComplectEntity = components['schemas']['ComplectEntity'];
export type SchemaInfoblockLightEntity = components['schemas']['InfoblockLightEntity'];
export type SchemaCreateRegionDto = components['schemas']['CreateRegionDto'];
export type SchemaRegionEntity = components['schemas']['RegionEntity'];
export type SchemaCreatePortalRegionDto = components['schemas']['CreatePortalRegionDto'];
export type SchemaUpdatePortalRegionDto = components['schemas']['UpdatePortalRegionDto'];
export type SchemaDeletePortalRegionDto = components['schemas']['DeletePortalRegionDto'];
export type SchemaPlacementDto = components['schemas']['PlacementDto'];
export type SchemaComplectValueDto = components['schemas']['ComplectValueDto'];
export type SchemaComplectDto = components['schemas']['ComplectDto'];
export type SchemaSupplyDto = components['schemas']['SupplyDto'];
export type SchemaSupplyFieldDto = components['schemas']['SupplyFieldDto'];
export type SchemaCellsGroupDto = components['schemas']['CellsGroupDto'];
export type SchemaCellsWrapper = components['schemas']['CellsWrapper'];
export type SchemaOfferOptionsDto = components['schemas']['OfferOptionsDto'];
export type SchemaPriceDto = components['schemas']['PriceDto'];
export type SchemaContracPortaltDto = components['schemas']['ContracPortaltDto'];
export type SchemaContractMeasureDto = components['schemas']['ContractMeasureDto'];
export type SchemaContractDto = components['schemas']['ContractDto'];
export type SchemaRegionsDto = components['schemas']['RegionsDto'];
export type SchemaRegionDto = components['schemas']['RegionDto'];
export type SchemaProductRowDto = components['schemas']['ProductRowDto'];
export type SchemaProductRowSetDto = components['schemas']['ProductRowSetDto'];
export type SchemaBxRqAddressDto = components['schemas']['BxRqAddressDto'];
export type SchemaBxRqBankItemDto = components['schemas']['BxRqBankItemDto'];
export type SchemaBxRqBankDto = components['schemas']['BxRqBankDto'];
export type SchemaBxRqDto = components['schemas']['BxRqDto'];
export type SchemaContractSpecificationDto = components['schemas']['ContractSpecificationDto'];
export type SchemaContractGenerateDto = components['schemas']['ContractGenerateDto'];
export type SchemaOfferDto = components['schemas']['OfferDto'];
export type SchemaContactIdDto = components['schemas']['ContactIdDto'];
export type SchemaContractLtype = components['schemas']['CONTRACT_LTYPE'];
export type SchemaClientTypeDto = components['schemas']['ClientTypeDto'];
export type SchemaSupplyReportDto = components['schemas']['SupplyReportDto'];
export type SchemaPbxDealDto = components['schemas']['PbxDealDto'];
export type SchemaPbxCompanyDto = components['schemas']['PbxCompanyDto'];
export type SchemaInitSupplyDto = components['schemas']['InitSupplyDto'];
export type SchemaBitrixHookAuthRequestDto = components['schemas']['BitrixHookAuthRequestDto'];
export type SchemaInitDealDto = components['schemas']['InitDealDto'];
export type SchemaAuthDto = components['schemas']['AuthDto'];
export type SchemaCreateDealBodyDto = components['schemas']['CreateDealBodyDto'];
export type SchemaSmartItemDto = components['schemas']['SmartItemDto'];
export type SchemaAddSmartItemDto = components['schemas']['AddSmartItemDto'];
export type SchemaTranscriptionRequestDto = components['schemas']['TranscriptionRequestDto'];
export type SchemaTranscriptionResponseDto = components['schemas']['TranscriptionResponseDto'];
export type SchemaOfferTemplateVisibility = components['schemas']['OfferTemplateVisibility'];
export type SchemaPageType = components['schemas']['PageType'];
export type SchemaBlockType = components['schemas']['BlockType'];
export type SchemaCreateOfferTemplatePageBlockDto = components['schemas']['CreateOfferTemplatePageBlockDto'];
export type SchemaCreateOfferTemplatePageStickerDto = components['schemas']['CreateOfferTemplatePageStickerDto'];
export type SchemaCreateOfferTemplatePageDto = components['schemas']['CreateOfferTemplatePageDto'];
export type SchemaCreateOfferTemplateFontDto = components['schemas']['CreateOfferTemplateFontDto'];
export type SchemaCreateOfferTemplateDto = components['schemas']['CreateOfferTemplateDto'];
export type SchemaUpdateOfferTemplateDto = components['schemas']['UpdateOfferTemplateDto'];
export type SchemaUpdateOfferTemplateFontDto = components['schemas']['UpdateOfferTemplateFontDto'];
export type SchemaCreateOfferTemplateImageDto = components['schemas']['CreateOfferTemplateImageDto'];
export type SchemaStorageType = components['schemas']['StorageType'];
export type SchemaImageParent = components['schemas']['ImageParent'];
export type SchemaUpdateOfferTemplateImageDto = components['schemas']['UpdateOfferTemplateImageDto'];
export type SchemaUpdateOfferTemplatePageDto = components['schemas']['UpdateOfferTemplatePageDto'];
export type SchemaPageOrderDto = components['schemas']['PageOrderDto'];
export type SchemaReorderPagesDto = components['schemas']['ReorderPagesDto'];
export type SchemaUpdateOfferTemplatePageBlockDto = components['schemas']['UpdateOfferTemplatePageBlockDto'];
export type SchemaBlockOrderDto = components['schemas']['BlockOrderDto'];
export type SchemaReorderBlocksDto = components['schemas']['ReorderBlocksDto'];
export type SchemaStickerOrderDto = components['schemas']['StickerOrderDto'];
export type SchemaReorderStickersDto = components['schemas']['ReorderStickersDto'];
export type SchemaCreateOfferTemplatePortalDto = components['schemas']['CreateOfferTemplatePortalDto'];
export type SchemaCreateUserSelectedTemplateDto = components['schemas']['CreateUserSelectedTemplateDto'];
export type SchemaBxDepartmentDto = components['schemas']['BxDepartmentDto'];
export type SchemaBitrixMethodDto = components['schemas']['BitrixMethodDto'];
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HealthController_healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PrometheusController_index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TelegramController_getTelegram: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TelegramSendMessageDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DepartmentEndpointController_getFullDepartment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ListController_getListFields: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetBxListDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DealsScheduleController_moveDealStages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DealsScheduleController_moveDealStagesQueue: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AlfaHookController_handleActivity: {
        parameters: {
            query: {
                companyId: string;
                title: string;
                date: string;
                responsible: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PbxSmartController_getSmartsByDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Domain of the portal */
                domain: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PbxSmartController_getSmartByPortalAndName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                domain: string;
                smartName: "service_offer" | "service_order" | "service_call" | "service_call_result" | "service_call_result_result";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PbxSmartController_parseSmart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                smartName: "service_offer" | "service_order" | "service_call" | "service_call_result" | "service_call_result_result";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PbxSmartController_installSmart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Domain of the portal */
                domain: string;
                smartName: "service_offer" | "service_order" | "service_call" | "service_call_result" | "service_call_result_result";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PbxSmartController_deleteSmart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                domain: string;
                smartName: "service_offer" | "service_order" | "service_call" | "service_call_result" | "service_call_result_result";
                smartGroup: "service" | "sales";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PortalController_getPortal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PortalController_getPortalByDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                domain: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PortalController_getPortals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PortalController_updateWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                domain: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWebhookDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PortalOuterController_getPortalByDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                domain: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PortalOuterController_updatePortalByDomain: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePortalDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TemplateBaseController_getOfferTemplateByDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                domain: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TemplateBaseController_getTemplatesByDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                domain: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TemplateBaseController_getTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProviderController_getProvider: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProviderController_getProviderByDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                domain: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    KpiReportController_getReport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReportGetRequestDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    KpiReportController_getCallingStatistic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetCallingStatisticDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    KpiReportDownloadController_excel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KpiReportDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventSalesController_getFlow: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventSalesFlowDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventSalesBxActivityController_getFullDepartment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BxActivityDto"];
            };
        };
        responses: {
            /** @description Successfully retrieved activities */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BxActivityDto"][];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    QueuePingController_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    QueuePingController_ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QueuePingDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ZakupkiOfferController_createZakupkiOffer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ZakupkiOfferCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FilesController_download: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InfoblockController_getInfoblocks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InfoblockController_getInfoblockByCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ComplectController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список всех комплектов */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComplectEntity"][];
                };
            };
        };
    };
    ComplectController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateComplectDto"];
            };
        };
        responses: {
            /** @description Комплект успешно создан */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComplectEntity"];
                };
            };
        };
    };
    ComplectController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Комплект найден */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComplectEntity"];
                };
            };
            /** @description Комплект не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ComplectController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateComplectDto"];
            };
        };
        responses: {
            /** @description Комплект успешно обновлен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComplectEntity"];
                };
            };
            /** @description Комплект не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ComplectController_getAvailableInfoblocks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список доступных инфоблоков */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfoblockLightEntity"][];
                };
            };
            /** @description Комплект не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SupplyController_findMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SupplyController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SupplyController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SupplyController_findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SupplyController_updateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InfogroupController_findMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InfogroupController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InfogroupController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InfogroupController_findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RegionController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список всех регионов */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionEntity"][];
                };
            };
        };
    };
    RegionController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRegionDto"];
            };
        };
        responses: {
            /** @description Регион успешно создан */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionEntity"];
                };
            };
        };
    };
    RegionController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Регион найден */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionEntity"];
                };
            };
            /** @description Регион не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RegionController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRegionDto"];
            };
        };
        responses: {
            /** @description Регион успешно обновлен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionEntity"];
                };
            };
            /** @description Регион не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RegionController_updateFromExcel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Регионы успешно обновлены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionEntity"][];
                };
            };
        };
    };
    PortalRegionController_getPortalRegions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Domain of the Bitrix24 portal */
                domain: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Регионы успешно получены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionEntity"][];
                };
            };
        };
    };
    PortalRegionController_createPortalRegion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePortalRegionDto"];
            };
        };
        responses: {
            /** @description Регион успешно создан */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionEntity"][];
                };
            };
        };
    };
    PortalRegionController_updatePortalRegion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePortalRegionDto"];
            };
        };
        responses: {
            /** @description Регион успешно обновлен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionEntity"][];
                };
            };
        };
    };
    PortalRegionController_deletePortalRegion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeletePortalRegionDto"];
            };
        };
        responses: {
            /** @description Регион успешно удален */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionEntity"][];
                };
            };
        };
    };
    ContractGenerateController_generateContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractGenerateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferController_createOffer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OfferDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    KonstructorInitController_init: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InitSupplyController_initSupply: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InitSupplyDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InitDealController_initDeal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InitDealDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AlfaController_createDeal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dealId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDealBodyDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AlfaSmartController_getSmarts: {
        parameters: {
            query: {
                domain: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AlfaSmartController_getSmartFieldsById: {
        parameters: {
            query: {
                domain: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AlfaSmartController_getSmartCategories: {
        parameters: {
            query: {
                domain: string;
            };
            header?: never;
            path: {
                entityTypeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AlfaSmartController_getSmartDataById: {
        parameters: {
            query: {
                domain: string;
            };
            header?: never;
            path: {
                entityTypeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AlfaSmartController_getAllSmarts: {
        parameters: {
            query: {
                domain: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AlfaSmartItemController_getList: {
        parameters: {
            query: {
                domain: string;
            };
            header?: never;
            path: {
                entityTypeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AlfaSmartItemController_add: {
        parameters: {
            query: {
                domain: string;
                categoryId: 26;
                stageId: "NEW" | "PREPARATION" | "CLIENT" | "UC_JLSIU6" | "SUCCESS" | "FAIL";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Add smart */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddSmartItemDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TranscriptionController_startTranscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TranscriptionRequestDto"];
            };
        };
        responses: {
            /** @description Transcription started successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TranscriptionResponseDto"];
                };
            };
        };
    };
    TranscriptionController_getTranscriptionResult: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task ID to check status */
                taskId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns transcription status and result if available */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TranscriptionResponseDto"];
                };
            };
        };
    };
    OfferTemplateController_findAllOfferTemplate: {
        parameters: {
            query: {
                /** @description The visibility of the offer template */
                visibility: components["schemas"]["OfferTemplateVisibility"];
                /** @description The portal id of the offer template */
                portal_id: string;
                /** @description The is active of the offer template */
                is_active: boolean;
                /** @description The search of the offer template */
                search: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateController_createOfferTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOfferTemplateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateController_findPublic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateController_findByPortal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The portal id */
                portal_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateController_findUserTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The user id */
                user_id: number;
                /** @description The portal id */
                portal_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOfferTemplateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateController_findOneWithRelations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateController_incrementCounter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateController_setActiveOfferTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateController_setDefault: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateFontController_findAllOfferTemplateFont: {
        parameters: {
            query: {
                offer_template_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateFontController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOfferTemplateFontDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateFontController_findByTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template id */
                template_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateFontController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template font id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateFontController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template font id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateFontController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template font id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOfferTemplateFontDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateFontController_findOneWithRelations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template font id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateImageController_findAllOfferTemplateImage: {
        parameters: {
            query?: {
                portal_id?: string;
                /** @description Тип хранения */
                storage_type?: components["schemas"]["StorageType"];
                /** @description Родитель */
                parent?: components["schemas"]["ImageParent"];
                /** @description Публичный ли объект */
                is_public?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateImageController_createOfferTemplateImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOfferTemplateImageDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateImageController_findByPortal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The portal id */
                portal_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateImageController_findByParent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The parent type */
                parent: "template" | "page" | "block" | "sticker" | "other";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateImageController_findByStorageType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The storage type */
                storage_type: "app" | "public" | "private";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateImageController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template image id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateImageController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template image id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateImageController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template image id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOfferTemplateImageDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateImageController_findOneWithRelations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template image id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplateImageController_setPublic: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template image id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageController_findAll: {
        parameters: {
            query: {
                /** @description The offer template id */
                offer_template_id: number;
                /** @description The order of the offer template page */
                order: number;
                /** @description The type of the offer template page */
                type: components["schemas"]["PageType"];
                /** @description The is active of the offer template page */
                is_active: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageController_createOfferTemplatePage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOfferTemplatePageDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageController_findByTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template id */
                template_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageController_findByTemplateWithBlocks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template id */
                template_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template page id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template page id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template page id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOfferTemplatePageDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageController_findOneWithRelations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template page id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageController_setActivePage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template page id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageController_reorderPages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReorderPagesDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageBlockController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOfferTemplatePageBlockDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageBlockController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template page block id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageBlockController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template page block id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageBlockController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template page block id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOfferTemplatePageBlockDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageBlockController_findOneWithRelations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template page block id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageBlockController_reorderBlocks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReorderBlocksDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageStickerController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOfferTemplatePageStickerDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageStickerController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template page sticker id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePageStickerController_reorderStickers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReorderStickersDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePortalController_createOfferTemplatePortal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOfferTemplatePortalDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePortalController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template portal id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePortalController_setActiveTemplatePortal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template portal id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OfferTemplatePortalController_setDefault: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The offer template portal id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserSelectedTemplateController_createUserSelectedTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserSelectedTemplateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserSelectedTemplateController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The user selected template id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserSelectedTemplateController_setCurrent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The user selected template id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserSelectedTemplateController_setFavorite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The user selected template id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserSelectedTemplateController_setActiveUserSelectedTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The user selected template id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DepartmentController_getFullDepartment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BxDepartmentDto"];
            };
        };
        responses: {
            /** @description Returns full department information including general department, children departments, and all users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        department?: {
                            /** @description Base department ID */
                            department?: number;
                            /** @description General department information */
                            generalDepartment?: Record<string, never>[];
                            /** @description Child departments information */
                            childrenDepartments?: Record<string, never>[];
                            /** @description All users in the department */
                            allUsers?: Record<string, never>[];
                        };
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HelperController_bitrixMethod: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BitrixMethodDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
